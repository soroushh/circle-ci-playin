version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.0.0
  aws-eks: circleci/aws-eks@1.0.1
  kubernetes: circleci/kubernetes@1.3
  terraform: circleci/terraform@3.0.1

jobs: # we now have TWO jobs, so that a workflow can coordinate them!
  one: # This is our first job.
    docker: # it uses the docker executor
      - image: cimg/ruby:2.6.8 # specifically, a docker image with ruby 2.6.8
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    # Steps are a list of commands to run inside the docker container above.
    steps:
      - checkout # this pulls code down from GitHub
      - run: echo $CIRCLE_SHA1 # This prints "A first hello" to stdout.
      - run: echo "The above is the commit ID."
      - run: sleep 25 # a command telling the job to "sleep" for 25 seconds.
  two: # This is our second job.
    docker: # it runs inside a docker image, the same as above.
      - image: cimg/ruby:3.0.2
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - run: echo "A more familiar hi" # We run a similar echo command to above.
      - run: sleep 15 # and then slnds.
  create-deployment:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          The AWS region
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: dep.yaml
          resource-name: deployment/nginx-deployment
          show-kubectl-command: true
          envsubst: true
      - kubernetes/create-or-update-resource:
          resource-file-path: service.yaml
          resource-name: service/nginx-service-loadbalancer

# Under the workflows: map, we cadefine above.
workflows:
  deploy_infrastructure:
    jobs:
      - terraform/fmt:
          checkout: true
      - terraform/validate:
          checkout: true
          backend_config: bucket=tformcon, key=tf.state
          requires:
            - terraform/fmt
      - terraform/plan:
          checkout: true
          backend_config: bucket=tformcon, key=tf.state
          persist-workspace: true
          requires:
            - terraform/validate
      - terraform/apply:
          attach-workspace: true
          backend_config: bucket=tformcon, key=tf.state
          filters:
            branches:
              only: master
          requires:
            - terraform/plan
      - terraform/init:
          attach-workspace: true
          requires:
            - terraform/apply
      - terraform/destroy:
          attach-workspace: true
          backend_config: bucket=tformcon, key=tf.state
          filters:
            branches:
              only: master
          requires:
            - terraform/init
  build_and_push_image:
    jobs:
      - one
#      - aws-ecr/build-and-push-image:
#          aws-cli-version: latest
#          aws-access-key-id: AWS_ACCESS_KEY_ID
#          aws-secret-access-key: AWS_SECRET_KEY
#          create-repo: true
#          dockerfile: Dockerfile
#          path: ./services/web
#          registry-id: AWS_ECR_REGISTRY_ID
#          repo: myecrrepo
#          tag: "$CIRCLE_SHA1"
#      - create-deployment:
#          requires:
#            - aws-ecr/build-and-push-image
#          cluster-name: my-cluster
#          aws-region: eu-west-1

